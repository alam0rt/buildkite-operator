// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	buildkite "github.com/alam0rt/go-buildkite/v2/buildkite"
	mock "github.com/stretchr/testify/mock"
)

// PipelineAL is an autogenerated mock type for the PipelineAL type
type PipelineAL struct {
	mock.Mock
}

// Create provides a mock function with given fields: pipelineInput
func (_m *PipelineAL) Create(pipelineInput *buildkite.CreatePipeline) error {
	ret := _m.Called(pipelineInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(*buildkite.CreatePipeline) error); ok {
		r0 = rf(pipelineInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields:
func (_m *PipelineAL) Exists() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *PipelineAL) Get() (buildkite.Pipeline, error) {
	ret := _m.Called()

	var r0 buildkite.Pipeline
	if rf, ok := ret.Get(0).(func() buildkite.Pipeline); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(buildkite.Pipeline)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: pipeline
func (_m *PipelineAL) Update(pipeline *buildkite.Pipeline) error {
	ret := _m.Called(pipeline)

	var r0 error
	if rf, ok := ret.Get(0).(func(*buildkite.Pipeline) error); ok {
		r0 = rf(pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
